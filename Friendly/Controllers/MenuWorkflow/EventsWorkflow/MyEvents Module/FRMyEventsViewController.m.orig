//
//  FRMyEventsViewController.m
//  Friendly
//
//  Created by Zaslavskaya Yevheniya on 17.03.16.
//  Copyright Â© 2016 TecSynt. All rights reserved.
//

#import "FRMyEventsViewController.h"
#import "FRMyEventsSegmentedMenu.h"
#import "FRMyEventsCellViewModel.h"
#import "FREventTransport.h"
#import "FRRequestTransport.h"
#import "FRMyEventsHostCell.h"
#import "FRMyEventsCell.h"
#import "FRMyEventsToolbar.h"
#import "FRMyEventsCellToolbar.h"
#import "FRUserManager.h"
#import "FRCreateEventWireframe.h"
#import "FRMyProfileWireframe.h"
#import "FRMyEventsGuestViewController.h"
#import "FRMyEventsMoreViewController.h"
#import "FRCreateEventInviteFriendsViewController.h"
#import "FREventRequestsViewController.h"
#import "FREventPreviewController.h"
#import "FRShareEventViewController.h"
#import "FRTransitionAnimator.h"
#import "FRCreateEventInviteToCoHostViewController.h"
#import "FRBadgeCountManager.h"
#import "FREmptyStateView.h"
#import "BSHudHelper.h"

@interface FRMyEventsViewController () <UITableViewDataSource, UITableViewDelegate, FRMyEventsSegmentedMenuDelegate, FRMyEventsCellToolbarDelegate, FRMyEventsMoreViewControllerDelegate, FRMyEventsCellDelegate, FREventRequestsViewControllerDelegate>

@property (strong, nonatomic) FRMyEventsSegmentedMenu *segmentedMenu;
@property (strong, nonatomic) UITableView* myEventsTableView;
@property (strong, nonatomic) FRMyEventsCellViewModel* myEventsCellModel;
@property (strong, nonatomic) FRMyEventsHostCell* hostCell;
@property (strong, nonatomic) NSArray* hostingModels;
@property (strong, nonatomic) NSArray* joiningModels;
@property (strong, nonatomic) NSArray* models;
@property (strong, nonatomic) FRMyEventsToolbar* toolbar;
@property (assign, nonatomic) FRMyEventsCellType typeCell;
@property (strong, nonatomic) NSString* eventId;
@property (assign, nonatomic) NSInteger badgeCount;
@property (strong, nonatomic) FREmptyStateView* emptyStateView;

@end

@implementation FRMyEventsViewController

- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
    [BSHudHelper showHudWithType:BSHudTypeShowHud view:self title:nil message:nil];
    [self updateData];
    [self.toolbar updateAvatarPhoto];
    [self.hostCell updateAvatarPhoto];
//    self.badgeCount = [[[FREventRequestsViewController alloc] init] getRequestsCount];
    self.badgeCount = [FRUserManager sharedInstance].eventRequestsCount;
      [[FRBadgeCountManager new] getEventRequestCount:^(NSInteger count) {
         [FRUserManager sharedInstance].eventRequestsCount = count;
        [self.toolbar updateBadgeWithCount:[FRUserManager sharedInstance].eventRequestsCount];
    }];
    id<GAITracker> tracker = [[GAI sharedInstance] defaultTracker]; // 1
    [tracker set:kGAIScreenName value:@"MyEventsScreen"];             // 2
    [tracker send:[[GAIDictionaryBuilder createAppView] build]];
    self.emptyStateView.hidden = YES;

    [self toolbar];
//    [BSHudHelper showHudWithType:BSHudTypeHideHud view:self title:nil message:nil];
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    [self segmentedMenu];
    self.segmentedMenu.delegate = self;
    [self.toolbar updateBadgeWithCount:[FRUserManager sharedInstance].eventRequestsCount];
    [self.emptyStateView.titleLabel setText:@"Your not hosting anything"];
    [self.emptyStateView.subtitleLabel setText:@"I think it's time you create you first\nevent which will live here"];
    [self myEventsTableView];
    [self hostCell];
    [self.hostCell addTarget:self action:@selector(showCreateEvent:) forControlEvents:UIControlEventTouchUpInside];
    [self.view setBackgroundColor:[UIColor bs_colorWithHexString:@"#E8EBF1"]];
}


#pragma mark - Delegates

-(void)updateData
{
    [self getData];
    [self.myEventsTableView reloadData];
    [BSHudHelper showHudWithType:BSHudTypeHideHud view:self title:nil message:nil];
    [[FRBadgeCountManager new] getEventRequestCount:^(NSInteger count) {
        [FRUserManager sharedInstance].eventRequestsCount = count;
        [self.toolbar updateBadgeWithCount:[FRUserManager sharedInstance].eventRequestsCount];
    }];
    [self.toolbar updateBadgeWithCount:self.badgeCount];
}

-(void)getData
{
    [BSHudHelper showHudWithType:BSHudTypeShowHud view:self title:nil message:nil];
    [FREventTransport getHostingEventWithSuccess:^(FREventModels *models) {
        self.hostingModels = models.events;
        
        if (self.typeCell == FRMyEventsCellTypeHosting)
        {
            self.models = self.hostingModels;
            [self.myEventsTableView reloadData];
        }
        if ((self.hostingModels.count == 0)&&(self.typeCell == FRMyEventsCellTypeHosting))
        {
            self.emptyStateView.hidden = NO;
        }
        else
        {
            self.emptyStateView.hidden = YES;
        }
        [BSHudHelper showHudWithType:BSHudTypeHideHud view:self title:nil message:nil];
    } failure:^(NSError *error) {
        UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:
                                  @"Error" message:error.localizedDescription  delegate:self
                                                 cancelButtonTitle:@"Cancel" otherButtonTitles:nil];
        [alertView show];
    }];
    
    [FREventTransport getJoingEventWithSuccess:^(FREventModels *models) {
        
        self.joiningModels = models.events;
        if (self.typeCell == FRMyEventsCellTypeJoining)
        {
            self.models = self.joiningModels;
            [self.myEventsTableView reloadData];
        }
//        if (self.joiningModels.count == 0)
//        {
//            self.emptyStateView.hidden = NO;
//        }
//        else
//        {
//            self.emptyStateView.hidden = YES;
//        }
        [BSHudHelper showHudWithType:BSHudTypeHideHud view:self title:nil message:nil];
    }
                                       failure:^(NSError *error) {
                                           UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:
                                                                     @"Error" message:error.localizedDescription  delegate:self
                                                                                    cancelButtonTitle:@"Cancel" otherButtonTitles:nil];
                                           [alertView show];
                                       }];
    [BSHudHelper showHudWithType:BSHudTypeHideHud view:self title:nil message:nil];
}
- (void)showUserProfile
{
    [[FRMyProfileWireframe new] presentMyProfileControllerFromNavigationController:self.navigationController];
}

- (void)showEventRequests
{
    FREventRequestsViewController* requestVC = [FREventRequestsViewController new];
    requestVC.delegate = self;
    [self presentViewController:requestVC animated:YES completion:nil];
}

- (void)guestsSelectWithUser:(NSMutableArray*)users andEvent:(FREventModel *)event
{
    FRMyEventsGuestViewController* guestsVC = [FRMyEventsGuestViewController new];
    guestsVC.heightFooter = 310;
    guestsVC.users = users;
    guestsVC.eventId = event.id;
    guestsVC.event = event;
    if (self.typeCell == FRMyEventsCellTypeHosting) {
        [guestsVC updateWithHostingType];
    }
    [self presentViewController:guestsVC animated:YES completion:nil];
}

- (void) leaveEvent:(NSString *)eventId
{
    UIAlertView * alert =[[UIAlertView alloc ] initWithTitle:@"Warning"
                                                     message:@"Are you sure you want to leave this event?"
                                                    delegate:self
                                           cancelButtonTitle:@"No"
                                           otherButtonTitles:@"Yes", nil];
    [alert show];
    self.eventId = eventId;
}

- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == 1) {
        [FRRequestTransport unsubscribeWithEventId:self.eventId success:^{
            [self updateData];
        } failure:^(NSError *error) {
            //
        }];
    }
}

-(void)presentShareEventControllerWithModel:(FREventModel*)model
{
    FRShareEventViewController* shareVC = [FRShareEventViewController new];
    
    [shareVC updateWithEvent:model];
    [self presentViewController:shareVC animated:YES completion:nil];
}

-(void)showCreateEvent:(UIButton*)sender
{
    [[FRCreateEventWireframe new] presentCreateEventControllerFromNavigationController:self event:nil];
}

- (void) moreSelectWithEvent:(NSString*)eventId andModel:(FREventModel*)model
{
    FRMyEventsMoreViewController* moreVC = [FRMyEventsMoreViewController new];
    [moreVC updateWithEventId:eventId andModel:model];
    moreVC.delegate = self;
    moreVC.heightFooter = 240;
    [self presentViewController:moreVC animated:YES completion:nil];
}

- (void) showInviteWithEvent:(NSString*)eventId andEvent:(FREventModel *)event
{
    FRCreateEventInviteFriendsViewController* inviteVC = [FRCreateEventInviteFriendsViewController new];
    inviteVC.heightFooter = 240;
    [inviteVC updateWithEventId:eventId andEvent:event];
    inviteVC.isVCForCreating = NO;
    [self presentViewController:inviteVC animated:YES completion:nil];
}

- (void) editEvent:(FREventModel *)event
{
    [[FRCreateEventWireframe new] presentCreateEventControllerFromNavigationController:self.navigationController event:event];
}

- (void) shareEvent:(FREventModel *)event
{
    [self presentShareEventControllerWithModel:event];
}


#pragma mark - MenuDelegate

- (void) selectedHosting
{
    self.typeCell = FRMyEventsCellTypeHosting;
    self.models = self.hostingModels;
    [self.myEventsTableView reloadData];
    self.hostCell.hidden = NO;
    [_hostCell mas_updateConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(self.segmentedMenu.mas_bottom).offset(10);
        make.left.right.equalTo(self.view);
        make.height.equalTo(@55);
    }];
    if (self.hostingModels.count == 0)
    {
        self.emptyStateView.hidden = NO;
    }
    else
    {
        self.emptyStateView.hidden = YES;
    }

    [self.emptyStateView.titleLabel setText:@"Your not hosting anything"];
    [self.emptyStateView.subtitleLabel setText:@"I think it's time you create you first\nevent which will live here"];
    [_myEventsTableView mas_updateConstraints:^(MASConstraintMaker *make) {
        make.bottom.left.right.equalTo(self.view);
        make.top.equalTo(self.segmentedMenu.mas_bottom).offset(70);
    }];
    
}

- (void) selectedJoining
{
    self.typeCell = FRMyEventsCellTypeJoining;
    self.models = self.joiningModels;
    [self.myEventsTableView reloadData];
    self.hostCell.hidden = YES;
    if (self.joiningModels.count == 0)
    {
        self.emptyStateView.hidden = NO;
    }
    else
    {
        self.emptyStateView.hidden = YES;
    }

    [self.emptyStateView.titleLabel setText:@"Not attending anything?"];
    [self.emptyStateView.subtitleLabel setText:@"Cant find an event you like? Host one\nand even ask a buddy to co-host"];
    [_myEventsTableView mas_updateConstraints:^(MASConstraintMaker *make) {
        make.bottom.left.right.equalTo(self.view);
        make.top.equalTo(self.segmentedMenu.mas_bottom).offset(10);
    }];
}


#pragma mark - TableViewDelegate

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    return 208;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return self.models.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *returnCell;
    static NSString *CellIdentifier;
    CellIdentifier = @"EventView";
    FRMyEventsCell *eventViewCell = (FRMyEventsCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (!eventViewCell)
    {
        eventViewCell = [[FRMyEventsCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
    }
    FRMyEventsCellViewModel* cellViewModel = [FRMyEventsCellViewModel initWithModel:[self.models objectAtIndex:indexPath.row] type:self.typeCell];
    eventViewCell.footerView.cellToolBarDelegate = self;
    eventViewCell.delegate = self;
    [eventViewCell updateWithModel:cellViewModel];
    returnCell = eventViewCell;
    returnCell.selectionStyle = UITableViewCellSelectionStyleNone;
    return returnCell;
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{

}

-(void)showEventBySelectingRowWithModel:(FREventModel*)model
{
<<<<<<< HEAD
    FRMyEventsCellViewModel* cellViewModel = [FRMyEventsCellViewModel initWithModel:model type:self.typeCell];
    FREventPreviewController* vc = [[FREventPreviewController alloc] initWithEventId:cellViewModel.id andModel:model];
    if (self.typeCell == FRMyEventsCellTypeHosting)
    {
        vc.isHostingEvent = YES;
    }
    if (self.typeCell == FRMyEventsCellTypeJoining)
    {
        vc.isAttendingStatus = YES;
    }
    UINavigationController* nv = [[UINavigationController alloc]initWithRootViewController:vc];
    nv.navigationBarHidden = YES;
    [[FRTransitionAnimator new] presentViewController:nv from:self];
=======
//    FRMyEventsCellViewModel* cellViewModel = [FRMyEventsCellViewModel initWithModel:model type:self.typeCell];
//    FREventPreviewController* vc = [[FREventPreviewController alloc] initWithEventId:cellViewModel.id andModel:model];
//    if (self.typeCell == FRMyEventsCellTypeHosting)
//    {
//        vc.isHostingEvent = YES;
//    }
//    if (self.typeCell == FRMyEventsCellTypeJoining)
//    {
//        vc.isAttendingStatus = YES;
//    }
//    UINavigationController* nv = [[UINavigationController alloc]initWithRootViewController:vc];
//    nv.navigationBarHidden = YES;
    //    UIImage *image = [UIImage imageWithData:[NSData dataWithContentsOfURL:[NSURL URLWithString:cellViewModel.backImage]]];
    //    vc.eventImage = image;
    
//    [[FRTransitionAnimator new] presentViewController:nv from:self];

    
//    [self presentViewController:nv animated:YES completion:^
//     {
////         nv.view.frame = CGRectMake(0, 0, self.view.frame.size.width-20, self.view.frame.size.height-20);
////         nv.view.center = self.view.center;
//              }];

>>>>>>> sergey_branch
}


#pragma mark - LazyLoad

- (FREmptyStateView*) emptyStateView
{
    if (!_emptyStateView)
    {
        _emptyStateView = [FREmptyStateView new];
        [self.view addSubview:_emptyStateView];
        [self.view insertSubview:_emptyStateView aboveSubview:self.myEventsTableView];
        [_emptyStateView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.centerY.equalTo(self.view);
            make.left.right.equalTo(self.view);
            make.height.equalTo(@50);
        }];
    }
    return _emptyStateView;
}

- (FRMyEventsToolbar*) toolbar
{
    if (!_toolbar)
    {
        _toolbar = [FRMyEventsToolbar new];
        _toolbar.delegate = self;
        _toolbar.frame = CGRectMake(0, 0, self.view.frame.size.width, 100);
        [self.view addSubview:_toolbar];
        [_toolbar mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.left.right.equalTo(self.view);
            make.height.equalTo(@65);
        }];
    }
    return _toolbar;
}

- (FRMyEventsHostCell*) hostCell
{
    if (!_hostCell)
    {
        _hostCell = [FRMyEventsHostCell new];
        [self.view addSubview:_hostCell];
        [_hostCell mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.segmentedMenu.mas_bottom).offset(10);
            make.left.right.equalTo(self.view);
            make.height.equalTo(@55);
        }];
    }
    return _hostCell;
}

- (FRMyEventsSegmentedMenu*) segmentedMenu
{
    if (!_segmentedMenu)
    {
        _segmentedMenu = [FRMyEventsSegmentedMenu new];
        [self.view addSubview:_segmentedMenu];
        [_segmentedMenu mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.toolbar.mas_bottom);
            make.left.right.equalTo(self.view);
            make.height.equalTo(@40);
        }];
    }
    return _segmentedMenu;
}

-(UITableView*) myEventsTableView
{
    if (!_myEventsTableView)
    {
        _myEventsTableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStylePlain];
        _myEventsTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        _myEventsTableView.allowsSelection = YES;
        [_myEventsTableView setBackgroundColor:[UIColor bs_colorWithHexString:@"#E8EBF1"]];
        _myEventsTableView.bounces = NO;
        _myEventsTableView.delegate = self;
        _myEventsTableView.clipsToBounds = YES;
        _myEventsTableView.dataSource = self;
        [self.view addSubview:_myEventsTableView];
        [_myEventsTableView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.bottom.left.right.equalTo(self.view);
            make.top.equalTo(self.hostCell.mas_bottom).offset(10);
        }];
    }
    return _myEventsTableView;
}

@end
