//
//  FREventPreviewController.m
//  Friendly
//
//  Created by Zaslavskaya Yevheniya on 10.03.16.
//  Copyright Â© 2016 TecSynt. All rights reserved.
//

#import "FREventPreviewController.h"
#import "FREventPreviewConstants.h"
#import "FRStyleKit.h"
#import "FREventPreviewEventViewCell.h"
#import "FREventPreviewTextCell.h"
#import "FREventPreviewTitleInfoCell.h"
#import "FREventPreviewInfoCell.h"
#import "FREventPreviewAttendingCell.h"
#import "FREventPreviewCategoryCell.h"
#import "FRJoinEventViewController.h"
#import "FRMyEventsCellToolbar.h"
#import "FRMyEventsGuestViewController.h"
#import "FRMyEventsMoreViewController.h"
#import "FREventModel.h"
#import "FREventTransport.h"
#import "FRCreateEventInviteFriendsViewController.h"
#import "FRAnimator.h"
#import "FRUserModel.h"
#import "FRUserManager.h"
#import "FRRequestTransport.h"
#import "FRCreateEventWireframe.h"
#import "FRTransitionAnimator.h"
#import "FRShareEventViewController.h"
#import "FRUserProfileWireframe.h"
#import "FRSearchEventByCategoryWireframe.h"
#import "FRMyProfileWireframe.h"
#import "BSHudHelper.h"

@interface FREventPreviewController () <UITableViewDataSource, UITableViewDelegate, FREventPreviewEventViewCellViewModelDelegate, FRMyEventsCellToolbarDelegate, FRMyEventsMoreViewControllerDelegate, FREventPreviewEventViewCellDelegate, FRJoinEventViewControllerDelegate, FREventPreviewAttendingCellDelegate>

@property (strong, nonatomic) UITableView* eventPreviewTableView;
@property (strong, nonatomic) UIButton* joinButton;
@property (strong, nonatomic) UIButton* arrowButton;
@property (strong, nonatomic) UIButton* closeButton;
@property (strong, nonatomic) FRMyEventsCellToolbar* hostingToolbar;
@property (strong, nonatomic) FREvent* model;
@property (strong, nonatomic) FRSearchEventByCategoryWireframe* categoryWireframe;
@property (strong, nonatomic) FREventPreviewInfoCellViewModel* previewInfoModelWhere;
@property (strong, nonatomic) FREventPreviewInfoCellViewModel* previewInfoModelTime;

@property (strong, nonatomic) UIView* cardView;

@property (strong, nonatomic) FREventPreviewInfoCellViewModel* previewInfoModelHostsNumber;

@property (strong, nonatomic) FREventPreviewInfoCellViewModel* previewInfoModelOpen;

@property (strong, nonatomic) FREventPreviewTextCellViewModel* previewTextModel;
@property (strong, nonatomic) FREventPreviewCategoryCellViewModel* previewCategoryModel;
@property (strong, nonatomic) FREventPreviewEventViewCellViewModel* previewEventViewModel;
@property (strong, nonatomic) FREventPreviewAttendingViewModel* previewAttendingModel;
@property (nonatomic, strong) UIImageView* cellImage;
@property (nonatomic, strong) NSString* eventId;
@property (nonatomic, strong) UIButton* editButton;
@property (nonatomic, strong) MASConstraint* bottom;
@property (nonatomic, strong) MASConstraint* left;
@property (nonatomic, strong) MASConstraint* right;


@end

@implementation FREventPreviewController

- (instancetype)initWithEventId:(NSString*)eventId andModel:(FREventModel*)model
{
    self = [self init];
    if (self)
    {
        self.model = model;
        self.eventId = eventId;
        [[UIApplication sharedApplication] setStatusBarHidden:YES];
        self.statusBarBackgraundView.hidden = YES;
        self.editButton.hidden = YES;
    }
    return self;
}

- (instancetype)initWithEvent:(FREvent*)event
{
    self = [self init];
    if (self)
    {
        self.model = event;
        self.eventId = event.eventId;
        
        [[UIApplication sharedApplication] setStatusBarHidden:YES];
        self.statusBarBackgraundView.hidden = YES;
        
        //        self.modalPresentationStyle = UIModalPresentationOverFullScreen;
        //        self.modalTransitionStyle = UIModalTransitionStyleCrossDissolve;
    }
    return self;

}


- (void)viewWillAppear:(BOOL)animated
{
    [[UIApplication sharedApplication] setStatusBarHidden:YES];
    [self closeButton];
    [self arrowButton];
    [self getData];
    [self changingEventType];
    [FRAnimator animateConstraint:self.left newOffset:15 key:@"left"];
    [FRAnimator animateConstraint:self.right newOffset:-15 key:@"right"];
  }

- (void)viewDidLoad {
    [super viewDidLoad];
    self.view.backgroundColor = [UIColor blackColor];
    [self cardView];
    [self eventPreviewTableView];

    self.eventPreviewTableView.hidden = YES;
}

- (void)viewWillDisappear:(BOOL)animated
{
    [super viewWillDisappear:animated];
    [[UIApplication sharedApplication] setStatusBarHidden:NO];
}

- (void)getData
{
//    [FREventTransport getEventInfoWithId:self.eventId success:^(FREventModel* event)
//     {
//         self.model = event;
         self.previewInfoModelWhere = [FREventPreviewInfoCellViewModel initWithModel:self.model type:(FRInfoCellViewModelTypeWhere)];
         self.previewInfoModelTime= [FREventPreviewInfoCellViewModel initWithModel:self.model type:(FRInfoCellViewModelTypeTime)];
         self.previewInfoModelHostsNumber = [FREventPreviewInfoCellViewModel initWithModel:self.model type:(FRInfoCellViewModelTypeHostsNumber)];
         self.previewInfoModelOpen = [FREventPreviewInfoCellViewModel initWithModel:self.model type:(FRInfoCellViewModelTypeOpen)];
         self.previewCategoryModel = [FREventPreviewCategoryCellViewModel initWithModel:self.model];
         self.previewEventViewModel = [FREventPreviewEventViewCellViewModel initWithModel:self.model];
         self.previewEventViewModel.delegate = self;
         self.previewTextModel = [FREventPreviewTextCellViewModel initWithModel:self.model];
         self.previewAttendingModel = [FREventPreviewAttendingViewModel initWithModel:self.model];
         if (self.model.requestStatus.integerValue == 2)
         {
             self.isAttendingStatus = YES;
         }
         if (([self.model.creator.user_id isEqualToString:[NSString stringWithFormat:@"%@", [FRUserManager sharedInstance].userModel.id]])||([self.model.partnerHosting isEqualToString:[NSString stringWithFormat:@"%@", [FRUserManager sharedInstance].userId]]))
         {
             self.isHostingEvent = YES;
         }
         [self.eventPreviewTableView reloadData];
         self.eventPreviewTableView.hidden = NO;
         [UIView animateWithDuration:0.3 animations:^
         {
             self.cellImage.alpha = 0;
             //self.joinButton.backgroundColor = [UIColor bs_colorWithHexString:kPurpleColor];
         } completion:^(BOOL finished) {
             [self changingEventType];
             [UIView animateWithDuration:0.3 animations:^
             {
                 if ((self.isAttendingStatus)||(self.isHostingEvent))
                 {
                     [FRAnimator animateConstraint:self.bottom newOffset:0 key:@"bottom"];
                         [self.eventPreviewTableView mas_updateConstraints:^(MASConstraintMaker *make) {
                             make.bottom.equalTo(self.cardView).offset(-50);
                         }];

                 }
             }
             completion:^(BOOL finished)
              {
                  
                  
              }];
         }];
}
//                                 failure:^(NSError *error)
//     {
//         UIAlertView *alertView = [[UIAlertView alloc]initWithTitle:
//                                   @"Error" message:error.localizedDescription  delegate:self
//                                                  cancelButtonTitle:@"Cancel" otherButtonTitles:nil];
//         [alertView show];
//     }];
//    
//}

- (void)showActionSheet:(NSString*)userId
{
    UIAlertController* alert = [UIAlertController alertControllerWithTitle:nil message:FRLocalizedString(@"Option", nil) preferredStyle:UIAlertControllerStyleActionSheet];
    UIAlertAction* viewProfile = [UIAlertAction actionWithTitle:FRLocalizedString(@"View profile", nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        [self showUserProfile:userId];
    }];
    UIAlertAction* removeUser = [UIAlertAction actionWithTitle:FRLocalizedString(@"Remove user", nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        [self removeUserAlert:userId];
    }];
    UIAlertAction* cancel = [UIAlertAction actionWithTitle:FRLocalizedString(@"Cancel", nil) style:UIAlertActionStyleCancel handler:nil];
    
    [alert addAction:viewProfile];
    [alert addAction:removeUser];
    [alert addAction:cancel];
    [self presentViewController:alert animated:YES completion:nil];
}

-(void)removeUserAlert:(NSString*)userId
{
    UIAlertController* alert = [UIAlertController alertControllerWithTitle:@"Warning" message:FRLocalizedString(@"You won't be able to add this user again. Are you sure you don't want this person on your event?", nil) preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction* removeUser = [UIAlertAction actionWithTitle:FRLocalizedString(@"Yes", nil) style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
        [FRRequestTransport discardUserId:userId fromEventId:self.eventId success:^{
            [self.eventPreviewTableView reloadRowsAtIndexPaths:@[[NSIndexPath indexPathForRow:7 inSection:0]] withRowAnimation:NO];
        } failure:^(NSError *error) {
            [BSHudHelper showHudWithType:BSHudTypeError view:self title:nil message:error.localizedDescription];
        }];
    }];
    UIAlertAction* cancel = [UIAlertAction actionWithTitle:FRLocalizedString(@"No", nil) style:UIAlertActionStyleCancel handler:nil];
    
    [alert addAction:removeUser];
    [alert addAction:cancel];
    [self presentViewController:alert animated:YES completion:nil];

}

- (void)attendingUserTaped:(NSString*)userId
{
    if (self.isHostingEvent)
    {
        [self showActionSheet:userId];
    }
    else
    {
        [self showUserProfile:userId];
    }
}

- (void) showUserProfile:(NSString *)userId
{
         if ([[FRUserManager sharedInstance].userModel.id isEqualToString:userId])
        {
            FRMyProfileWireframe* myWF = [[FRMyProfileWireframe alloc] init];
            [myWF presentMyProfileControllerFromNavigationController:self.navigationController];
        }
        else
        {
            FRUserProfileWireframe* profileWF = [[FRUserProfileWireframe alloc] init];
            [profileWF presentUserProfileControllerFromNavigationController:self.navigationController userId:userId];
        }
}

- (void) showUserProfile
{
    if (self.isHostingEvent)
    {
        FRMyProfileWireframe* myWF = [[FRMyProfileWireframe alloc] init];
        [myWF presentMyProfileControllerFromNavigationController:self.navigationController];
    }
    else
    {
        FRUserProfileWireframe* profileWF = [[FRUserProfileWireframe alloc] init];
        //TODO
//        [profileWF presentUserProfileControllerFromNavigationController:self.navigationController userId:self.model.creator_id];
    }
}

- (void) showPartnerProfile
{
    FRUserProfileWireframe* profilePartnerWF = [[FRUserProfileWireframe alloc] init];
    //TODO: userEntity
//        [profilePartnerWF presentUserProfileControllerFromNavigationController:self.navigationController userId:self.model.partner_hosting];
}

- (void) changingEventType
{
  if (self.isHostingEvent)
    {
        [self.hostingToolbar updateWithType:FRMyEventsCellTypeHosting];
        self.hostingToolbar.cellToolBarDelegate = self;
        self.isAttendingStatus = YES;
<<<<<<< HEAD
        [self.hostingToolbar updateWithEvent:self.model andUsers:self.model.users];
//        self.editButton.hidden = NO;
//        self.arrowButton.hidden = YES;
        [self.arrowButton mas_updateConstraints:^(MASConstraintMaker *make) {
            make.width.equalTo(@77);
        }];
        [self.arrowButton setTitle:FRLocalizedString(@"    Edit    ", nil) forState:UIControlStateNormal];
        [self.arrowButton setImage:nil forState:UIControlStateNormal];

=======
        [self.hostingToolbar updateWithEvent:self.model andUsers:self.model.memberUsers.allObjects];
>>>>>>> sergey_branch
    }
    else if (self.isAttendingStatus)
    {
        [self.hostingToolbar updateWithType:FRMyEventsCellTypeJoining];
        self.hostingToolbar.cellToolBarDelegate = self;
<<<<<<< HEAD
        [self.hostingToolbar updateWithEvent:self.model andUsers:self.model.users];
//        self.editButton.hidden = YES;
//        self.arrowButton.hidden = NO;
=======
        [self.hostingToolbar updateWithEvent:self.model andUsers:self.model.memberUsers.allObjects];
>>>>>>> sergey_branch
    }
    else
    {
//        [self.eventPreviewTableView mas_updateConstraints:^(MASConstraintMaker *make) {
//            make.bottom.equalTo(self.view);
//        }];
    }
}

-(void) updateRequestStatus
{
    self.model.requestStatus = @1;
    [self getData];
    [self.eventPreviewTableView reloadData];
}

- (void) updateData
{
    [self dismissViewControllerAnimated:YES completion:nil];
}

- (void) showJoinRequest
{
     FRJoinEventViewController* joinVC = [FRJoinEventViewController new];
     joinVC.heightFooter = 284.5;
     joinVC.delegate = self;
     [joinVC updateWithEventId:self.eventId];
     [self presentViewController:joinVC animated:YES completion:nil];
}

- (void) guestsSelectWithUser:(NSMutableArray*)users andEvent:(FREventModel *)event
{
    FRMyEventsGuestViewController* guestsVC = [FRMyEventsGuestViewController new];
    guestsVC.heightFooter = 310;
    guestsVC.users = users;
    guestsVC.eventId = event.id;
    guestsVC.event = event;
    if (self.isHostingEvent)
    {
        [guestsVC updateWithHostingType];
    }
    [self presentViewController:guestsVC animated:YES completion:nil];
}

- (void) editEvent:(FREventModel *)event
{
        event = self.model;
    [[FRCreateEventWireframe new] presentCreateEventControllerFromNavigationController:self event:event];
}

- (void) shareEvent:(FREventModel *)event
{
    FRShareEventViewController* shareVC = [FRShareEventViewController new];
    [shareVC updateWithEvent:self.model];
    [self presentViewController:shareVC animated:YES completion:^{
        //
    }];

}

- (void) moreSelectWithEvent:(NSString*)eventId andModel:(FREventModel*)model
{
    FRMyEventsMoreViewController* moreVC = [FRMyEventsMoreViewController new];
    [moreVC updateWithEventId:eventId andModel:self.model];
    moreVC.delegate = self;
    moreVC.heightFooter = 240;
    [self presentViewController:moreVC animated:YES completion:nil];
}

- (void) showInviteWithEvent:(NSString*)eventId andEvent:(FREventModel*)event
{
    FRCreateEventInviteFriendsViewController* inviteVC = [FRCreateEventInviteFriendsViewController new];
    inviteVC.heightFooter = 240;
    [inviteVC updateWithEventId:eventId andEvent:event];
    inviteVC.isVCForCreating = NO;
    [self presentViewController:inviteVC animated:YES completion:nil];
}

- (void) leaveEvent:(NSString *)eventId
{
    UIAlertView * alert = [[UIAlertView alloc ] initWithTitle:@"Warning"
                                                         message:@"Are you sure you want to leave this event?"
                                                        delegate:self
                                               cancelButtonTitle:@"No"
                                               otherButtonTitles:@"Yes", nil];
    [alert show];
}
    
- (void)alertView:(UIAlertView *)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == 1) {
        [FRRequestTransport unsubscribeWithEventId:self.eventId success:^{
            [self updateData];
        } failure:^(NSError *error) {
                //
        }];
    }
}


#pragma mark - UITableViewDataSource

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.row == 8) {
        self.categoryWireframe = [[FRSearchEventByCategoryWireframe alloc] init];
        [self.categoryWireframe presentSearchEventByCategoryControllerFromNavigationController:self.navigationController category:self.model.category];
    }
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return 9;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *returnCell;
    static NSString *CellIdentifier;
    
    if (indexPath.row == 0)
    {
        CellIdentifier = @"EventView";
        FREventPreviewEventViewCell *eventViewCell = (FREventPreviewEventViewCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (!eventViewCell)
        {
            eventViewCell = [[FREventPreviewEventViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
            
        }
        
        if (self.isHostingEvent)
        {
            eventViewCell.joinButton.hidden = YES;
        }
        eventViewCell.clipsToBounds = YES;
        [eventViewCell updateWithModel:self.previewEventViewModel];
        eventViewCell.delegate = self;
        returnCell = eventViewCell;
    }
    else if (indexPath.row == 1)
    {
        CellIdentifier = @"Text";
        FREventPreviewTextCell *textCell =  (FREventPreviewTextCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (!textCell)
        {
            textCell = [[FREventPreviewTextCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        }
        [textCell updateWithModel:self.previewTextModel];
        returnCell = textCell;
    }
    else if (indexPath.row == 2)
    {
        CellIdentifier = @"EventInfoTitle";
        FREventPreviewTitleInfoCell *titleInfoCell =  (FREventPreviewTitleInfoCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (!titleInfoCell)
        {
            titleInfoCell = [[FREventPreviewTitleInfoCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        }
        if (self.isAttendingStatus)
        {
            [titleInfoCell updateTitleInfoCellWithAttendingStatus];
        }
        returnCell = titleInfoCell;
        
    }
    else if (indexPath.row == 3)
    {
        CellIdentifier = @"EventInfo";
        FREventPreviewInfoCell *infoCell =  (FREventPreviewInfoCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (!infoCell)
        {
            infoCell = [[FREventPreviewInfoCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        }
        infoCell.separator.hidden = NO;
        [infoCell updateWithModel:self.previewInfoModelWhere];
        if (self.isAttendingStatus)
        {
            [infoCell updateWhereInfoCellWithAttendingStatus:self.model.address lat:self.model.lat.stringValue lon:self.model.lon.stringValue];
        }
        returnCell = infoCell;
    }
    else if (indexPath.row == 4)
    {
        CellIdentifier = @"EventInfo";
        FREventPreviewInfoCell *infoCell =  (FREventPreviewInfoCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (!infoCell)
        {
            infoCell = [[FREventPreviewInfoCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        }
        [infoCell updateWithModel:self.previewInfoModelTime];
        if (self.isAttendingStatus)
        {
            [infoCell updateTimeInfoCellWithAttendingStatus:self.model.event_start];
        }
        infoCell.separator.hidden = NO;

        returnCell = infoCell;
        
    }
    else if (indexPath.row == 5)
    {
        CellIdentifier = @"EventInfo";
        FREventPreviewInfoCell *infoCell =  (FREventPreviewInfoCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (!infoCell)
        {
            infoCell = [[FREventPreviewInfoCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        }
        infoCell.separator.hidden = NO;

        [infoCell updateWithModel:self.previewInfoModelHostsNumber];

        returnCell = infoCell;
    }
    else if (indexPath.row == 6)
    {
        CellIdentifier = @"EventInfo";
        FREventPreviewInfoCell *infoCell =  (FREventPreviewInfoCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (!infoCell)
        {
            infoCell = [[FREventPreviewInfoCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        }

            infoCell.separator.hidden = YES;

        [infoCell updateWithModel:self.previewInfoModelOpen];

        returnCell = infoCell;
    }
    
    else if (indexPath.row == 7)
    {
        CellIdentifier = @"Attending";
        FREventPreviewAttendingCell *attendingCell =  (FREventPreviewAttendingCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (!attendingCell)
        {
            attendingCell = [[FREventPreviewAttendingCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
            
        }
        [attendingCell updateWithModel:self.previewAttendingModel];
        attendingCell.delegate = self;
        returnCell = attendingCell;
    }
    else if (indexPath.row == 8)
    {
        CellIdentifier = @"Category";
        FREventPreviewCategoryCell *categoryCell = (FREventPreviewCategoryCell*)[tableView dequeueReusableCellWithIdentifier:CellIdentifier];
        if (!categoryCell)
        {
            categoryCell = [[FREventPreviewCategoryCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        }
        [categoryCell updateWithModel:self.previewCategoryModel];
        returnCell = categoryCell;
    }
    returnCell.selectionStyle = UITableViewCellSelectionStyleNone;

    return returnCell;
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
    [self changePositionY:scrollView.contentOffset.y];
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    switch (indexPath.row) {
        case FREventPreviewEventView:
        {
            return 355;
        } break;
        case FREventPreviewText:
        {
            
            CGFloat width = [UIScreen mainScreen].bounds.size.width - 30;
            UILabel* label = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, width, CGFLOAT_MAX)];
            label.numberOfLines = 0;
            label.text = self.previewTextModel.infoText;
            [label sizeToFit];
            
            return label.bounds.size.height + 70;

        } break;
        case FREventPreviewTitleInfo:
        {
            return 100;
        } break;
        case FREventPreviewInfoWhere:
        {
            if (self.isAttendingStatus)
            {
            return 265;
            }
            else
            {
            return 57.5;
            }
            
        } break;
        case FREventPreviewInfoMeetTime:
        {
            return 57.5;
            
        } break;
        case FREventPreviewInfoHostsNumber:
        {
            return 57.5;
            
        } break;
        case FREventPreviewInfoOpenToFriends:
        {
            return 57.5;
            
        } break;
        case FREventPreviewAttending:
        {
            return 238;
        } break;
        case FREventPreviewCategory:
        {
            return 145;
            
        } break;
        case FREventPreviewJoinEvent:
        {
            return 50;
            
        } break;
        default:
            return self.eventPreviewTableView.rowHeight;
            break;
    }
}


#pragma mark - LazyLoad

-(UIView*) cardView
{
    if (!_cardView)
    {
        _cardView = [UIView new];
        [_cardView setBackgroundColor:[UIColor whiteColor]];
        _cardView.layer.cornerRadius = 15;
        [self.view addSubview:_cardView];
        [_cardView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.top.equalTo(self.view);
            make.right.bottom.equalTo(self.view);
        }];
    }
    return _cardView;
}

-(UITableView*) eventPreviewTableView
{
    if (!_eventPreviewTableView)
    {
        _eventPreviewTableView = [[UITableView alloc] initWithFrame:CGRectZero style:UITableViewStylePlain];
        _eventPreviewTableView.separatorStyle = UITableViewCellSeparatorStyleNone;
        _eventPreviewTableView.allowsSelection = YES;
        _eventPreviewTableView.clipsToBounds = YES;
        _eventPreviewTableView.layer.masksToBounds = YES;
        _eventPreviewTableView.layer.cornerRadius = 15;
        _eventPreviewTableView.bounces = NO;
        _eventPreviewTableView.delegate = self;
        _eventPreviewTableView.dataSource = self;
        [self.cardView addSubview:_eventPreviewTableView];
        [_eventPreviewTableView mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.left.right.equalTo(self.cardView);
            make.bottom.equalTo(self.cardView);
        }];
    }
    return _eventPreviewTableView;
}

-(UIButton*) joinButton
{
    if (!_joinButton)
    {
        _joinButton = [UIButton new];
        [_joinButton setBackgroundColor:[UIColor bs_colorWithHexString:kPurpleColor]];
        [_joinButton setTitle:@"Join event" forState:UIControlStateNormal];
        _joinButton.titleLabel.font = FONT_SF_DISPLAY_MEDIUM(16);
        [_joinButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
        [self.cardView addSubview:_joinButton];
        [_joinButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.equalTo(self.cardView);
            make.height.equalTo(@50);
            self.bottom =  make.bottom.equalTo(self.cardView).offset(50);
        }];
    }
    return _joinButton;
}

-(FRMyEventsCellToolbar*) hostingToolbar
{
    if (!_hostingToolbar)
    {
        _hostingToolbar = [FRMyEventsCellToolbar new];
        _hostingToolbar.layer.cornerRadius = 15;
        _hostingToolbar.clipsToBounds = YES;
        [self.cardView addSubview:_hostingToolbar];
        [_hostingToolbar mas_makeConstraints:^(MASConstraintMaker *make) {
            make.left.right.equalTo(self.cardView);
            make.height.equalTo(@50);
            self.bottom =  make.bottom.equalTo(self.cardView).offset(50);
        }];
    }
    return _hostingToolbar;
}

-(UIButton*) arrowButton
{
    if (!_arrowButton)
    {
        _arrowButton = [UIButton new];
        [_arrowButton setBackgroundColor:[[UIColor blackColor] colorWithAlphaComponent:0.5f]];
        _arrowButton.layer.masksToBounds = NO;
        [_arrowButton setImage:[FRStyleKit imageOfActionBarShareCanvas] forState:UIControlStateNormal];
        [_arrowButton addTarget:self action:@selector(showShareVC:) forControlEvents:UIControlEventTouchUpInside];
        _arrowButton.layer.cornerRadius = 17.5;
        [self.cardView addSubview:_arrowButton];
        [_arrowButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.cardView).offset(25);
            self.right =  make.right.equalTo(self.cardView).offset(35);
            make.width.height.equalTo(@35);
        }];
    }
    return _arrowButton;
}

-(UIButton*) closeButton
{
    if (!_closeButton)
    {
        _closeButton = [UIButton new];
        [_closeButton setBackgroundColor:[[UIColor blackColor] colorWithAlphaComponent:0.5f]];
        [_closeButton setImage:[FRStyleKit imageOfNavCloseCanvas] forState:UIControlStateNormal];
        _closeButton.layer.cornerRadius = 17.5;
        [_closeButton addTarget:self action:@selector(selectedClose) forControlEvents:UIControlEventTouchUpInside];
        _closeButton.layer.masksToBounds = NO;
        
        [self.cardView addSubview:_closeButton];
        [_closeButton mas_makeConstraints:^(MASConstraintMaker *make) {
            make.top.equalTo(self.cardView).offset(25);
            make.width.height.equalTo(@35);
            self.left =  make.left.equalTo(self.cardView).offset(-35);
        }];
    }
    return _closeButton;
}
//
//- (UIButton*)editButton
//{
//    if (!_editButton)
//    {
////        CGFloat x = [UIScreen mainScreen].bounds.size.width - 92;
////        _editButton = [[UIButton alloc] initWithFrame:CGRectMake(x, 30, 77, 35)];
//        _editButton = [UIButton new];
//        [_editButton setTitle:FRLocalizedString(@"    Edit    ", nil) forState:UIControlStateNormal];
//        _editButton.backgroundColor  = [[UIColor blackColor] colorWithAlphaComponent:0.6];
//        _editButton.layer.cornerRadius = 17.5;
//        [_editButton addTarget:self action:@selector(editEvent:) forControlEvents:UIControlEventTouchUpInside];
//        _editButton.hidden = YES;
//        [self.cardView addSubview:_editButton];
//        [_editButton mas_makeConstraints:^(MASConstraintMaker *make) {
//            make.top.equalTo(self.cardView).offset(25);
//            self.right =  make.right.equalTo(self.cardView).offset(35);
//            make.width.equalTo(@77);
//            make.height.equalTo(@35);
//        }];
//    }
//    return _editButton;
//}

#pragma mark - FREventPreviewEventViewCellViewModelDelegate

- (void)selectedClose
{
    UIViewController* temp = [UIApplication sharedApplication].keyWindow.rootViewController;
    [[FRTransitionAnimator new] dismissViewController:temp from:self];
}

- (void)showShareVC:(UIButton*)sender
{
    if (sender.imageView.image)
    {
        [self shareEvent:self.model];
    }
    else
    {
        [self editEvent:self.model];
    }
}

@end
